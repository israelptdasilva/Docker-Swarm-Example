version: '3.9'

services:  
  nginx:
    image: nginx 
    ports:
      - 3001:80
      - 3002:443
    configs:
      - source: config_nginx
        target: /etc/nginx/templates/default.conf.template
    environment:
      APP_HOST: app
    networks: 
      - services 

  app:
    image: localhost:5000/app:latest
    command: ['./config/wait-for-it.sh', 'database', '--', './config/wait-for-it.sh', 'cache', '--', 'npm', 'start']
    secrets:
      - secret_mysql_password
    environment:
      MYSQL_HOST: database 
      MYSQL_DATABASE: products
      MYSQL_USER: root
      MYSQL_PASSWORD: /run/secrets/secret_mysql_password 
      REDIS_HOST: cache
      REDIS_PORT: 6379
    networks:
      - services

  database:
    image: mysql 
    hostname: products-db 
    configs:
      - source: config_mysql
        target: /docker-entrypoint-initdb.d/init.sql  
    secrets:
      - secret_mysql_password
    environment:
      MYSQL_DATABASE: products
      MYSQL_ROOT_PASSWORD: /run/secrets/secret_mysql_password  
    volumes:
      - db:/home/lib/mysql
    networks:
      - services
    healthcheck:
      test: mysql -p$$MYSQL_ROOT_PASSWORD --silent -e 'SHOW DATABASES;'
      interval: 3s
      timeout: 3s
      retries: 10

  cache:
    image: redis
    entrypoint: redis-server
    command: --save 60 1 --loglevel warning 
    volumes:
      - cache:/data
    networks: 
      - services 
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 3s
      retries: 10

  monitoring:
    image: prom/prometheus 
    volumes:
      - ./config/prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    networks:
      - services

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    hostname: cadvisor 
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - services

  node_exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"'
      - '--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"'
    deploy:
      placement:
        constraints:
         - node.hostname == manager
    networks:
      - services

  grafana:
    image: grafana/grafana
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - 3000:3000
    networks:
      - services

configs:
  config_mysql:
    file: ./config/mysql/init.sql 
  config_nginx:
    file: ./config/nginx/templates/default.conf.template

secrets:
  secret_mysql_password:
    file: ./secrets/mysql_password.txt

networks:
  ingress:
    driver: overlay
  services:
    driver: overlay

volumes:
  db: {}
  cache: {}
